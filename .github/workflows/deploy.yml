name: Azure Static Web Apps CI/CD

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'api'
  NODE_VERSION: '18.x'

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  prod_deploy_infra:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    environment: production
    outputs:
      la_name: ${{ steps.deploy_infra.outputs.la_name }}
      function_app_name: ${{ steps.deploy_infra.outputs.function_app_name }}
      swa_api_token: ${{ steps.set_api_token.outputs.token }}
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4.1.1

    - name: Login via Az module
      uses: azure/login@v2.1.0
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}
        enable-AzPSSession: true 

    - uses: Azure/CLI@v2
      with:
        inlineScript: |
          #!/bin/bash
          az group create --name ${{ vars.RG_NAME }} --location ${{ vars.RG_LOCATION }}
          echo "Azure resource group created"                 

    - name: Deploy Infrastructure
      id: deploy_infra
      uses: azure/arm-deploy@v2
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ vars.RG_NAME }}
        template: ./infra/main.bicep
        parameters: 'poc_name=${{ vars.POC_NAME }} repositoryUrl=${{ github.server_url }}/${{ github.repository }} azure_devops_pat=${{ secrets.AZURE_DEVOPS_PAT }}'
        failOnStdErr: false
        scope: 'resourcegroup'
    
    - name: Set SWA API Token
      id: set_api_token
      uses: Azure/CLI@v2
      with:        
        inlineScript: |
          $token=$(az staticwebapp secrets list --name ${{ steps.deploy_infra.outputs.function_app_name }} --resource-group ${{ vars.RG_NAME }})
          echo "token=$token" >> "$GITHUB_OUTPUT"
  
  prod_build_and_deploy_function:
    runs-on: ubuntu-latest
    name: Build and Deploy Function App
    needs: [prod_deploy_infra]
    environment: production
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4.1.1

    - name: Setup Node ${{ env.NODE_VERSION }} Environment
      uses: actions/setup-node@v4.0.1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 'Resolve Project Dependencies Using Npm'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm install
        npm run build --if-present
        npm run test --if-present
        popd

    - name: Login via Az module
      uses: azure/login@v2.1.0
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}
        enable-AzPSSession: true 
    
    - name: Get publish Profile
      id: funcpublishprofile
      uses: azure/powershell@v2
      with:
        inlineScript: |
          $profile = Get-AzWebAppPublishingProfile `
              -ResourceGroupName ${{ vars.RG_NAME }} `
              -Name ${{ needs.prod_deploy_infra.outputs.function_app_name }}
          $profile = $profile.Replace("`r", "").Replace("`n", "")
          Write-Output "::set-output name=profile::$profile"
        azPSVersion: latest

    - name: Deploy Function App
      uses: Azure/functions-action@v1.5.1
      with:
        app-name: ${{ needs.prod_deploy_infra.outputs.function_app_name }}
        package: './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        publish-profile: ${{ secrets.funcpublishprofile.outputs.profile }}

  prod_build_and_deploy_swa:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    environment: production
    needs: [prod_deploy_infra, prod_build_and_deploy_function]
    name: Build and Deploy Static Web App
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          submodules: true
          lfs: false

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.deploy_infra.outputs.swa_api_token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          app_location: "/app"
          # Empty the api_location if you are bringing your own API
          api_location: ""
          skip_api_build: true
          output_location: "dist"
      
  prod_close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    environment: production
    needs: [prod_deploy_infra]
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.deploy_infra.outputs.swa_api_token }}
          action: "close"
          app_location: "/app"

  prod_logic_app_build:
    runs-on: ubuntu-latest
    needs: [prod_build_and_deploy_function]
    name: Build Logic App
    steps: 
    - name: Checkout
      uses: actions/checkout@v4.1.1
    - name: Package logic
      run: (cd logic_app; mkdir -p ../output; zip -r ../output/logic_app.zip .)
    
    - name: Upload app zip package
      uses: actions/upload-artifact@v4.3.1
      with:
        name: logic_app
        path: ./output/
        retention-days: 1
  
  prod_logic_app_deploy: 
    name: Deploy Logic App
    runs-on: ubuntu-latest
    needs: [prod_deploy_infra, prod_logic_app_build]
    environment: 
      name: production
    steps: 
    - name: Checkout
      uses: actions/checkout@v4.1.1    
    
    - name: Login via Az module
      uses: azure/login@v2.1.0
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION }}
        enable-AzPSSession: true 
    - uses: actions/download-artifact@v4.1.2
      with:
        name: logic_app
        path: ./output/
        
    - name: Get publish Profile
      id: publishprofile
      uses: azure/powershell@v2
      with:
        inlineScript: |
          $profile = Get-AzWebAppPublishingProfile `
              -ResourceGroupName ${{ vars.RG_NAME }} `
              -Name ${{ needs.prod_deploy_infra.outputs.la_name }}
          $profile = $profile.Replace("`r", "").Replace("`n", "")
          Write-Output "::set-output name=profile::$profile"
        azPSVersion: latest

    - name: Deploy to Azure Logic App
      uses: Azure/functions-action@v1.5.1
      id: la
      with:
        app-name: ${{ needs.prod_deploy_infra.outputs.la_name }}
        package: './output/logic_app.zip'
        publish-profile: ${{secrets.publishprofile.outputs.profile}}

    - name: Swap parameter files 
      id: params
      uses: azure/CLI@v2
      with:
        inlineScript: |
          az functionapp deploy --resource-group ${{ vars.RG_NAME }} --name ${{ needs.prod_deploy_infra.outputs.la_name }} --src-path  ./logic_app/azure.parameters.json --type static --target-path parameters.json --restart true --clean true